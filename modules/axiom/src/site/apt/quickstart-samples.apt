~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements. See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership. The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License. You may obtain a copy of the License at
~~
~~ http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied. See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

     ---------------------
      Quick Start Samples
     ---------------------

Schema validation using javax.xml.validation

  This sample demonstrates how to validate a part of an Axiom tree (actually the body of a SOAP message)
  using the <<<javax.xml.validation>>> API:

%{snippet|id=main|file=modules/axiom-samples/src/test/java/org/apache/axiom/samples/ValidateSample.java}

  It leverages the fact that Axiom is capable of constructing a <<<SAXSource>>> from an <<<OMDocument>>>
  or <<<OMElement>>>.

Loading local chunks from a large XML document

  Here the goal is to process a large XML document "by chunks", i.e.
  
    [[1]] Parse the file and find a relevant element (e.g. by name)
    
    [[2]] Load this element into memory as an <<<OMElement>>>.
    
    [[3]] Process the <<<OMElement>>> (the "chunk").
  
  The process is repeated until the end of the document is reached.
  
  This can be achieved without loading the entire document into memory (and without loading all the
  chunks in memory) by scanning the document using the StAX API and switching to Axiom when a
  matching element is found:

%{snippet|id=main|file=modules/axiom-samples/src/test/java/org/apache/axiom/samples/FragmentsSample.java}

  The code leverages the fact that <<<createStAXOMBuilder>>> can be used to build a fragment
  (corresponding to a given element) from a StAX stream reader, simply by passing an
  <<<XMLStreamReader>>> that is positioned on a <<<START_ELEMENT>>> event.
